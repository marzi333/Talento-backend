from functions import *
import json
import ast
from flask import Flask, jsonify, request
from functions import *
import json
import ast
from functions import *
from flask_cors import CORS, cross_origin

from langchain.llms import VertexAI
from langchain.embeddings import VertexAIEmbeddings
import vertexai


GOOGLE_APPLICATION_CREDENTIALS = "application_default_credentials.json"
vertexai.init(project="greenhat23mun-8051", location='europe-west4')
API_KEY = "AIzaSyA2DT0wULXH8FZQwVkcJZg5reMdwcN4SY8"

llm = VertexAI(max_output_tokens=512,model_name='text-bison')
embeddings = VertexAIEmbeddings()

app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

print("all_loaded correctly")


@app.route("/get_questions", methods=["POST"])
@cross_origin()
def get_questions():
    data = request.json
    job_description = data.get("job_description", None)
    cv_url = data.get("cv_url", None)

    if job_description is None or cv_url is None:
        return jsonify({"error": "Both job_description and cv_description are required"}), 400
    
    try:
        generated_questions = generate_questions(llm=llm,job_descr=job_description,cv_path=cv_url)


        return jsonify({"message": "Successfully received data","result": generated_questions}), 200
    except Exception as e:
        print(e)
        return jsonify({"error": "Error"}), 400


@app.route("/get_autogeneratedcv_info", methods=["POST"])
def get_autogeneratedcv_info():
    data = request.json
    job_description = data.get("job_description", None)
    cv_url = data.get("cv_url", None)
    answers = data.get("answers", None)


    if job_description is None or cv_url is None or answers is None:
        return jsonify({"error": "Both job_description and cv_description and answers are required"}), 400

    try:
        
        main_info = get_main_information(llm=llm,path=cv_url)
        main_info = clean_and_parse_json_string(main_info)

        print("ok main")

        detailed_info = get_detailed_information(llm=llm,path=cv_url)
        detailed_info = clean_and_parse_json_string(detailed_info)

        print("ok detailed")


        answers_info = answer_to_autogeneratedcv(llm=llm,answers=answers)
        answers_info = clean_and_parse_json_string(answers_info)

        print("ok answers")
    
        # return
        return jsonify({"message": "Successfully received data","main_info": main_info,"detailed_info": detailed_info,"answers_info": answers_info}),200
    except Exception as e:
        print(e)
        return jsonify({"error": "Error"}), 400


@app.route("/get_metrics", methods=["POST"])
def get_metrics():
    data = request.json
    job_description = data.get("job_description", None)
    cv_url = data.get("cv_url", None)
    answers = data.get("answers", None)


    if job_description is None or cv_url is None or answers is None:
        return jsonify({"error": "Both job_description and cv_description and answers are required"}), 400
    

    try: 
        experience_info = get_experience_level(llm=llm,path=cv_url,answers=answers)
        experience_info = clean_and_parse_json_string(experience_info)

        skills_cv = extract_skills_cv(llm,cv_url,job_descr=job_description)
        print(skills_cv)

        skills_job_descr = extract_skills_job_descr(llm=llm,job_descr=job_description)

        similarity_score,relevant_skills = get_similarity(embeddings=embeddings,job_descr_skills=skills_job_descr,cv_skills=skills_cv)

        # return
        return jsonify({"message": "Successfully received data","experience_info": experience_info,"similarity_score": similarity_score,"relevant_skills":relevant_skills}),200
    except Exception as e:
        print(e)
        return jsonify({"error": "Error"}), 400


    
if __name__ == "__main__":
    app.run(debug=True)